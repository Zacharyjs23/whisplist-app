rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isBoosted() {
      return resource.data.boostedUntil > request.time;
    }
    function isFollowerOf(userId) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(userId)/followers/$(request.auth.uid));
    }

    function isAuthenticated() {
      return request.auth != null &&
        (request.auth.token.firebase.sign_in_provider == 'anonymous' ||
         request.auth.token.firebase.sign_in_provider == 'password');
    }

    function isSignedIn() {
      return isAuthenticated();
    }

    match /wishes/{wishId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    match /wishes/{wishId}/comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    match /users/{userId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated() && request.auth.uid == userId;
    }

    match /users/{userId}/followers/{followerId} {
      allow read, write: if request.auth != null && request.auth.uid == followerId;
    }

    match /users/{userId}/following/{targetUserId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
